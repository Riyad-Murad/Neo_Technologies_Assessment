name: Deploy Terraform Infra and Ghost CMS

on:
  push:
    branches: [main]

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    outputs:
      ec2_ip: ${{ steps.get_ec2_ip.outputs.ec2_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="key_name=${{ secrets.EC2_KEY }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="key_name=${{ secrets.EC2_KEY }}"

      - name: Get EC2 IP from Terraform output
        id: get_ec2_ip
        run: |
          ip=$(
            "$TERRAFORM_CLI_PATH/terraform" output -raw ec2_public_ip 2>/dev/null | \
            grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | \
            head -n1 | \
            tr -d '\n\r ' # Remove any potential newline/whitespace characters
          )
          echo "ec2_ip=$ip" >> "$GITHUB_OUTPUT"
          echo "Captured IP is: $ip"

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  copy-files-to-ec2:
    name: Copy Docker Compose + Nginx + Certbot to EC2
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Prepare tarball
      run: |
        tar -czf deploy_files.tar.gz docker-compose.yaml nginx

    - name: Wait until EC2 port 22 is open
      run: |
        for i in {1..12}; do
          nc -zv ${{ needs.terraform.outputs.ec2_ip }} 22 && break
          echo "Waiting for EC2 SSH port..."
          sleep 5
        done

    - name: Copy tarball to EC2
      uses: appleboy/scp-action@v1
      with:
        host: ${{ needs.terraform.outputs.ec2_ip }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY_DEPLOY }}
        source: deploy_files.tar.gz
        target: "/home/${{ secrets.EC2_USER }}/"

  deploy-docker-ghost:
    name: Run Docker Compose + Certbot
    needs: [terraform, copy-files-to-ec2]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ needs.terraform.outputs.ec2_ip }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY_DEPLOY }}
          script: |
            cd /home/${{ secrets.EC2_USER }}

            # Wait for Docker to be ready (max 60s)
            for i in {1..10}; do
              if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
                echo "Docker is available!"
                break
              fi
              echo "Waiting for Docker to be available..."
              sleep 5
            done

            tar -xzf deploy_files.tar.gz
            rm deploy_files.tar.gz

            mkdir -p certbot/www
            mkdir -p certbot/conf

            chmod +x nginx/startup.sh

            sudo docker compose up -d ghost nginx

            echo "Waiting for nginx container to be healthy..."
            sleep 5

            # Wait until nginx is running (max 30s)
            for i in {1..5}; do
              STATUS=$(docker inspect -f '{{.State.Running}}' nginx 2>/dev/null)
              if [ "$STATUS" = "true" ]; then
                echo "Nginx is running"
                break
              fi
              echo "Waiting for nginx to start..."
              sleep 5
            done

            sudo docker compose run --rm certbot
            sudo docker compose restart
